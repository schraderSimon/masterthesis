import sys
sys.path.append("../libraries")
from func_lib import *
file="energy_data/N2_testdata.bin"
import pickle
with open(file,"rb") as f:
    data=pickle.load(f)
Hs=data["H"]
Ss=data["S"]
#FCI_geoms=[1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.5,4,5]
#CCSD=[-99.96990829657004, -100.02067194932962, -100.06147100300919, -100.09403754233679, -100.11978423612467, -100.13986957470333, -100.15524840918023, -100.16671114077215, -100.17491431219311, -100.18040480403361, -100.18363923063049, -100.18499967888714, -100.18480658857409, -100.18332933981739, -100.18079496059617, -100.1773952800185, -100.1732927841172, -100.16862540069404, -100.16351040627329, -100.15804761736632, -100.15232201407517, -100.14640591013422, -100.14036076791078, -100.13423872979969, -100.12808393313006, -100.12193363967114, -100.11581921896904, -100.1097670043588, -100.10379903784418, -100.09793371516363, -100.09218634184896, -100.08656960435007, -100.08109396883773, -100.07576801161338, -100.07059869025417, -100.0655915636152, -100.06075096555435, -100.05608014692102, -100.05158138397202, -100.04725606921225, -100.04310478242473, -100.03912734183766, -100.03532286882582, -100.0316898264294, -100.028226077133, -100.02492891486092, -100.02179512203766, -100.018821016608, -100.01600250301921, -100.01333512624602, -100.0108141093238, -100.00843444943712, -100.0061909105931, -100.00407812357963, -100.00209061819177, -100.00022284972468, -99.99846927775467, -99.99682438099556, -99.99528269745657, -99.99383885447442, -99.99248759450484, -99.99122379696581, -99.9900424964598, -99.98893887762495, -99.98790836821894, -99.98694651957537, -99.98604910689794, -99.9852120697838, -99.9844315595653, -99.98370395024284, -99.98302577125953, -99.98239375206937, -99.98180480577918, -99.98125602033433, -99.980744666412, -99.98026817024717, -99.97982412455788]
#CCSD=[-100.02555530807562, -100.07520721994598, -100.1148471226634, -100.14622089174016, -100.17075677846694, -100.18962861453743, -100.20380561611012, -100.2140907661918, -100.22115135273407, -100.2255430742976, -100.22772950614025, -100.22809759248203, -100.22697064577491, -100.22461900967443, -100.22126896493826, -100.21711020763331, -100.21230205836491, -100.2069786610814, -100.2012532685136, -100.19522164385573, -100.18896539178247, -100.18255359961987, -100.17604517610697, -100.16949027132425, -100.16293152642274, -100.15640510369802, -100.14994154675195, -100.14356651124001, -100.13730139380253, -100.13116388309355, -100.1251684448369, -100.11932675383578, -100.11364807876235, -100.10813962235669, -100.10280682239888, -100.09765361204437, -100.09268264723016, -100.08789549603661, -100.08329280134774, -100.07887441049576, -100.07463948404292, -100.07058658287755, -100.06671373127999, -100.06301843804138, -100.05949780340374, -100.05614850168794, -100.05296682553703, -100.0499487137764, -100.04708977868854, -100.04438533603602, -100.04183043569917, -100.03941989677712, -100.03714834410114, -100.03501024896381, -100.03300003428005, -100.03111185743494, -100.02934003677521, -100.02767884008483, -100.02612258242156, -100.02466566352803, -100.02330259833529, -100.02202804431195, -100.02083682583586, -100.01972398241337, -100.01868463618, -100.01771431890023, -100.01680856555981, -100.01596327575237, -100.01517454628403, -100.0144386894652, -100.01375224724538, -100.01311183726251, -100.01251435822856, -100.0119571105941, -100.01143718534192, -100.01095210579757, -100.0104995015551]

#FCI_energies=[-99.61763594843919, -100.02233609903067, -100.15708053879564, -100.18712346217941, -100.17583274725926, -100.14951120146067, -100.11968327651316, -100.09144082667083, -100.0669261028697, -100.03144824225244, -100.0120880423987, -99.99918263311564]
#x=np.linspace(1.2,5,38)
#E_FCI_i = interp1d(FCI_geoms,FCI_energies,kind='cubic')
#plt.plot(x,E_FCI_i(x),label="FCI")
plt.plot(np.linspace(1.5,5,77),CCSD,label="CCSD")
vals=list(np.arange(0,8,int(sys.argv[2])))
#vals=[10,11,12,53,54,55,56,57,58,59,60]
E=[]
exponent=float(sys.argv[1])
from scipy.io import savemat
dicty={}
dicty={"S":Ss,"H":Hs,"label":"Matlab_test"}
S=Ss[0]
print(Hs[-1])
print(Ss[-1])
U,s,vT=scipy.linalg.svd(Ss[0][:,:])
for svd in s:
    print(svd)
#print(scipy.linalg.eig(H)[0])
#print(scipy.linalg.eig(S[:-1,:-1])[0])
#print(scipy.linalg.inv(Ss[0])@Hs[0])
#print(scipy.linalg.inv(Ss[0])@Hs[-1])
#savemat("matlab_test.mat",dicty)
print(Hs[0].shape)
for k in range(len(x)):
    print(k)
    print(Hs[k].shape)
    H=np.array(Hs[k][np.ix_(vals,vals)].copy(),dtype=np.longdouble)+10**(-exponent)*np.eye(len(vals))
    S=np.array(Ss[k][np.ix_(vals,vals)].copy(),dtype=np.longdouble)
    #eigvals=np.real(scipy.linalg.eig(scipy.linalg.pinv(S,atol=10**(-exponent))@H)[0])
    #eigvals=np.real(scipy.linalg.eig(a=H,b=S+np.eye(len(S))*10**(-exponent))[0])
    #E.append(guptri_Eigenvalue(H,S+10**(-exponent)*scipy.linalg.expm(-S/10**(-exponent)),epsu=10**(-exponent),gap=int(sys.argv[3])))
    E.append(schur_lowestEigenValue(H,S+10**(-exponent)*scipy.linalg.expm(-S/10**(-exponent))))
    """
    eigvals=np.real(scipy.linalg.eig(a=H,b=S+np.eye(len(S))*10**(-exponent))[0])
    try:
        pass
        eigvals=np.real(scipy.linalg.eig(a=H,b=S+10**(-exponent)*scipy.linalg.expm(-S/10**(-exponent)))[0])
    except:
        print("Except")
        #eigvals=np.real(scipy.linalg.eig(a=H+np.eye(len(S))*10**(-exponent),b=S+np.eye(len(S))*10**(-exponent))[0])

    sorted=np.sort(eigvals)

    E.append(sorted[0])
    """
plt.plot(x,E,label="EVC")
plt.plot(x[::2][vals],np.array(CCSD)[vals],"o",label="samplepoints",)
plt.legend()
plt.show()
