import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append("../../libraries")
#from func_lib import *
molecule_name="HF"
basis="cc-pVTZ"
len_sample_geom=7
file="energy_data/convergence_%s_%s_%d.bin"%(molecule_name,basis,len_sample_geom)
import pickle
with open(file,"rb") as f:
    outdata=pickle.load(f)

sample_geometries=np.array(outdata["sample_geometries"])
sample_energies=outdata["sample_energies"]
print(outdata.keys())
niter_MP2=outdata["MP2"]
niter_AMP_startguess20=outdata["EVC_20"]
niter_AMP_startguess10=outdata["EVC_10"]

niter_prevGeom=outdata["prevGeom"]
niter_machinelearn_guess=outdata["GP"]
test_geometries=np.array(outdata["test_geometries"])

ECCSD=np.array(outdata["energies_CCSD"])*1000
E_AMP_red_20=np.array(outdata["energies_AMP_20"])*1000
E_AMP_red_10=np.array(outdata["energies_AMP_10"])*1000

E_ML=np.array(outdata["energies_ML"])*1000
if len_sample_geom==7:
    E_ML_linearDistance=1000*np.array([-100.19914323209453, -100.25916549565036, -100.30290592438038, -100.3223345387971, -100.31494763769082, -100.28517257719984, -100.24300428849227, -100.20072766176457, -100.16944846097962, -100.15675688860496, -100.16572124413584, -100.1946307178735, -100.23707495197893, -100.28267790864321, -100.31914763516171, -100.33568925233928, -100.32666011363426, -100.29369351822069, -100.2451190196586, -100.19301415805867, -100.14946122843249, -100.12362626657708, -100.1202745820962, -100.13930424773604, -100.17570595199655, -100.2200046275517, -100.25983705003155, -100.28304124651261, -100.28152611778323, -100.25420786578108, -100.20744281667717, -100.15271691103477, -100.10286674105176, -100.06863300123369, -100.05660899597302, -100.0684631796159, -100.1007728781014, -100.14524612704865, -100.18986121049623, -100.22153061027791, -100.22997766333361, -100.21132357257835, -100.16955822510093, -100.1150784590908, -100.06111667719348, -100.01987667302102, -99.9998513345475, -100.00460822779777, -100.03244479713223, -100.07644461430091, -100.12524669143133, -100.16524206716501, -100.18427884697186, -100.17569901823363, -100.14079330963885, -100.08834880627631, -100.03155014955803, -99.98387257645119, -99.95575244037452, -99.95279993019261, -99.97517483882565, -100.01749512415402, -100.06931763021711, -100.11688213967737, -100.14651441324256, -100.14889679867763, -100.12237393086633, -100.07359572858513, -100.01515874676896, -99.9615073269099, -99.92501572869472, -99.9135032164273, -99.92918040195545, -99.96837144362296, -100.02177301150891, -100.07579739275535, -100.1155902702687, -100.1292988986364, -100.11194186032718, -100.06695248700483, -100.00450371231994])
    E_ML=1000*np.array([-100.29104823596425, -100.30355968490726, -100.31391642306164, -100.32237987873613, -100.32917782102518, -100.33450885409464, -100.33854635050987, -100.34144190616082, -100.34332837048368, -100.34432249469937, -100.34452723336642, -100.34403372999981, -100.34292301521414, -100.34126744506429, -100.3391319072799, -100.33657482322582, -100.33364897314564, -100.33040217134995, -100.32687781642166, -100.32311533941554, -100.31915057054856, -100.31501604228768, -100.31074124409406, -100.30635284156268, -100.30187487032471, -100.29732891287581, -100.29273426454557, -100.28810809303668, -100.2834655944688, -100.27882014755218, -100.27418346647481, -100.26956575225745, -100.26497584173818, -100.26042135294838, -100.2559088254532, -100.25144385415548, -100.24703121518377, -100.24267498263393, -100.23837863520889, -100.23414515207965, -100.22997709759092, -100.22587669473421, -100.22184588758002, -100.21788641449182, -100.21399976581776, -100.21018734013391, -100.20645038756899, -100.20279004628736, -100.19920735270333, -100.19570324618695, -100.19227856923168, -100.1889340640157, -100.18567036624702, -100.18248799711793, -100.1793873541409, -100.17636870156305, -100.17343216098135, -100.17057770269138, -100.16780513823424, -100.1651141144737, -100.162504109694, -100.15997443525174, -100.15752422322474, -100.15515244558827, -100.15285790946234, -100.15063926528394, -100.14849501591794, -100.1464235270963, -100.14442303933147, -100.14249168103956, -100.14062748257834, -100.13882839090873, -100.13709228458116, -100.13541699157788, -100.13380029349209, -100.13223995503022, -100.13073372830334, -100.12927936798273, -100.12787464331036, -100.12651734906689, -100.12520531543237])
    Num_iter_linear=[12, 12, 11, 9, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 12, 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 13, 12, 12, 13, 14, 14, 15, 15, 15, 15, 15, 15, 14, 13, 2, 13, 15, 15, 15, 16, 16, 16, 16, 15, 15, 14, 12, 14, 15, 16, 16, 16, 17, 17, 17, 17, 16, 16, 14, 13, 15, 16, 16, 17, 17, 17, 17, 17, 17, 16, 15, 11, 15, 16, 17]
    num_iter=[11, 11, 10, 8, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 12, 13]

if len_sample_geom==10:
    E_ML_linearDistance=1000*np.array([-100.29011411060117, -100.30300772455465, -100.31367844017383, -100.32238897620738, -100.32937067183249, -100.33482752775747, -100.3389396709506, -100.34186633956732, -100.34374846568278, -100.34471091784008, -100.344864452973, -100.34430741766265, -100.34312723157996, -100.34140168084532, -100.339200045337, -100.33658408119678, -100.33360887747838, -100.33032360382897, -100.3267721641699, -100.3229937695284, -100.31902344147426, -100.31489245605404, -100.31062873670113, -100.30625720333735, -100.30180008374396, -100.29727719229349, -100.29270618025595, -100.28810276115097, -100.28348091397771, -100.27885306664555, -100.27423026150505, -100.2696223045556, -100.26503789967504, -100.26048476903492, -100.25596976075722, -100.25149894477975, -100.24707769787904, -100.24271077872544, -100.23840239388109, -100.23415625558151, -100.22997563216823, -100.22586339199117, -100.22182204157052, -100.21785376400418, -100.21396042796721, -100.21014364150317, -100.20640475623243, -100.20274489151782, -100.19916495233922, -100.19566564558761, -100.19224749511876, -100.18891085584819, -100.18565592706288, -100.18248276510583, -100.17939129546185, -100.17638132426497, -100.17345254915368, -100.17060456935383, -100.16783689485761, -100.16514895468045, -100.16254010579917, -100.16000962274532, -100.15755672406182, -100.15518056726567, -100.15288023178701, -100.15065472661296, -100.14850298062295, -100.14642383158419, -100.14441601209039, -100.14247813226008, -100.14060865918, -100.1388058932189, -100.13706794142206, -100.13539271599556, -100.13377779359824, -100.13222054317055, -100.1307179860658, -100.1292667869108, -100.12786321873608, -100.12650312900247, -100.12518190730167])
    Num_iter_linear=[9, 9, 9, 6, 8, 9, 9, 9, 8, 8, 8, 6, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 9, 9, 10, 10, 10, 10, 10, 7, 10, 11, 11]
fig,ax=plt.subplots(1,figsize=(5,4))
ax.legend()

ax.set_xlabel("Distance (Bohr)")
ax.set_ylabel("Number of iterations")
ax.vlines(sample_geometries,ymin=0,ymax=17,linestyle="--",label="Sample geometries",color="black",alpha=0.3)
ax.plot(test_geometries,niter_prevGeom,label="Previous geometry")
ax.plot(test_geometries,niter_MP2,label="MP2 guess")
ax.plot(test_geometries,niter_machinelearn_guess,label="Machine learning (U)")
ax.plot(test_geometries,Num_iter_linear,label="Machine learning (dist)")

ax.plot(test_geometries,niter_AMP_startguess20,label="Reduced sum (20%)")
ax.plot(test_geometries,niter_AMP_startguess10,label="Reduced sum (10%)")

ax.legend(labelspacing = 0.1)

plt.tight_layout()
plt.savefig("resultsandplots/%s_iterations_%s_%d.pdf"%(molecule_name,basis,len(sample_geometries)))
plt.show()

fig,ax=plt.subplots(1,figsize=(5,4))
ax.set_xlabel("Distance (Bohr)")
ax.set_title("Derivation from CCSD energy")
ax.set_ylabel("Energy [mH]")
ax.vlines(sample_geometries,ymin=-1.6,ymax=+1.6,linestyle="--",label="Sample geometries",color="black",alpha=0.3)
ax.plot(test_geometries,(E_ML-ECCSD),label="Machine learning (Orbitals)")
ax.plot(test_geometries,(E_ML_linearDistance-ECCSD),label="Machine learning (Distance)")

ax.plot(test_geometries,(E_AMP_red_20-ECCSD),label="Reduced sum (20%)")
ax.plot(test_geometries,(E_AMP_red_10-ECCSD),label="Reduced sum (10%)")
ax.set_ylim(min(E_ML-ECCSD)*1.01,abs(1.01*min(E_ML-ECCSD)))
plt.legend(labelspacing = 0.1)
plt.tight_layout()
plt.savefig("resultsandplots/%s_energy_%s_%d.pdf"%(molecule_name,basis,len(sample_geometries)))
plt.show()
